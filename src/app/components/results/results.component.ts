import { Component, OnInit } from '@angular/core';
import { style, animate, transition, trigger } from '@angular/animations';

@Component({
  selector: 'app-results',
  templateUrl: './results.component.html',
  styleUrls: ['./results.component.scss'],
  animations: [
    trigger('fadeInOut', [
      transition(':enter', [
        style({ opacity: 0 }),
        animate(500, style({ opacity: 1 }))
      ]),
      transition(':leave', [
        animate(500, style({ opacity: 0 }))
      ])
    ])
  ]
})
export class ResultsComponent implements OnInit {
  public bestIdea = [];
  public otherIdeas = [];

  public others = [];
  public stopFireWorks;
  public barChartOptions: any = {
    scaleShowVerticalLines: false,
    responsive: true
  };
  public pieChartLabels: string[] = ['Flight tourism', 'Baggage collection', 'Plug play back'];
  public pieChartData: number[] = [6, 6, 4];
  public pieChartType: any = 'pie';
  public chartColors: any[] = [
    {
      backgroundColor: ['#5E35B1', '#263238', '#E65100']
    },
    {
      borderColor: ['red']
    }
  ];

  constructor() { }

  ngOnInit() {
    this.stopFireWorks = false;
    this.bestIdea = [
      {
        name: 'Snowil Foss',
        // tslint:disable-next-line:max-line-length
        text: '#Flight tourism Idea using AR / VR',
        image: '../../../assets/imgs/snowil.jpg',
        class: 'fade-in'
      },
      {
        name: 'Suresh Chenga',
        text: '#Baggage loss/Delay & hassle in finding luggage at airport',
        image: '../../../assets/imgs/suresh.png',
        class: 'fade-in'
      }
    ];
    this.showFireWorks();

    this.others = [
      'Sebastian',
      'Amit Varne',
      'Amit',
    ];

    this.otherIdeas = [
      {
        name: 'Sebastian',
        idea: 'To implement appreciation webpage,where a team can appreciate some one of a team and awards given- need for Klm '
      },
      {
        name: 'Amit Varne',
        // tslint:disable-next-line:max-line-length
        idea: 'During long hour journey, especially 8 hours journey to US and India I faced some difficulties.  I got feedback from friends and familythat they got leg pain, neck pain and back pain after long journey. KLM can give small massage device to such customer. Also during ticket booking we can identify such customer and provide device to them. In business class if we can arrange small massage chair or some small devices.I can not find always good stuff on inflight entertainment screen. So It will be better if I can use my own Netflix, Amazon Prime or Youtube account. It can be linked with PNR and passenger can select his preferences before. '
      },
      {
        name: 'Amit',
        // tslint:disable-next-line:max-line-length
        idea: 'PLUG is an event based app which does not take any inputs from user. It becomes very difficult to re-create the error scenarios reported by the end user. However, all the messages generated by PLUG are logged using graylog. If the same messages are played in the same sequence and time gap again, we can recreate the PLUG behavior exactly as it happened previously.With the help of PLUG developers, I created a POC and demoed it in Arena during one of the bi-weekly sprint demos. It was well received by the audience. For the POC the messages were written directly in a DB and retrieved from there. For the next phase, I propose to build the playback tool which takes the message directly from Graylog. Also, for the POC, we granunarity of time difference was second, so it relied on jobs running one second apart. In reality PLUG sometimes sends out messages that are within the same second and are just milliseconds apart. Ideal solution should have the replayed events as close to true time difference.Other benefits of the solution: 1) Can be used for what if analysis - by inserting messages in between, we can test the PLUG behavior before building it in backend. 2) Can be used for training the end users. By replaying the flight, we can point out what he / she could have done in a particular situation.'
      },
      {
        name: 'Sunoj S M',
        // tslint:disable-next-line:max-line-length
        idea: 'Curently Appy2Help has a superior GUI when compared to exisiting system. But in order for Appy2Help to be considered as an alternative to exisiting system of Altea and for KLM to partly convert ground agent operations through Appy, the app needs to have its own dedicated backend that directly consumes Altea services so that the information shown in app is same as that of exisiting system. To achieve this Appy needs to have a front end and backend teams and the API we develop must have endpoints that accesses required Altea services. This will result in more usage of app and removes all dependencies it has with more than dozen of APIs it consumes. Appy can have control on what data it shows to users. Appy is an employee assisted app which means it needs to show more accurate data when compared to other channels. Currently consuming different APIs we lose the correct information in between (eg. Reseating. etc). This would also strategically puts Appy2Help in better position to gain control over its counterpart app in AF.'
      },
      {
        name: 'Manish Honale',
        // tslint:disable-next-line:max-line-length
        idea: 'To keep our app users updated and up-to-date in this Agile world, to help them do their job effectively and efficiently. To keep our app users updated - This can be simply achieved with "Whats New". Product team/Other team can add "Whats New" content/images in a back-end/content editor tool(eg. Magnolia). They can publish and maintain the Whats New content for every app version. API will deliver this to App when user upgrade to corresponding App version. This is like Breaking News to users ðŸ˜‰ To keep our app users up-to-date - This can be simply achieved by "Version Control". Product team/Other team can add Newest and Oldest supported app versions in a back-end/content editor tool(eg. Magnolia). They can maintain these supported versions. API will deliver this to App when user perform perform sync in application. '
      }
    ];
  }

  public showFireWorks() {
    setTimeout(() => {
      this.stopFireWorks = true;
    }, 4000);
  }

}
